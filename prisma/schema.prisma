
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}// Enumeración de roles de usuario
enum Role {
  STUDENT
  ADMIN
  EMPLOYEE
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  identification String          @unique
  name           String
  password       String
  photo          String?
  securityWord   String          @db.VarChar(100)
  role           Role            @default(STUDENT)
  position       String?         // Solo para empleados
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relaciones
  attendances    Attendance[]
  comments       Comment[]
  careers        UserCareer[]
  dishRatings    DishRating[]
}

model Career {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt DateTime @updatedAt @default(now())
  isActive    Boolean     @default(true)
  
  // Relación muchos a muchos con usuarios
  users       UserCareer[]
}

// Tabla intermedia para relación User-Career (Muchos a Muchos)
model UserCareer {
  userId    Int
  careerId  Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  career    Career  @relation(fields: [careerId], references: [id], onDelete: Cascade)
  
  @@id([userId, careerId]) // Clave primaria compuesta
}

model Dish {
  id              Int       @id @default(autoincrement())
  title           String
  description     String
  photo           String?
  cost            Float     // Costo del platillo
  calories        Int       // Calorías en kcal
  proteins        Float     // Proteínas en gramos
  fats            Float     // Grasas en gramos
  carbohydrates   Float     // Carbohidratos en gramos
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relación con las encuestas de satisfacción
  comments        Comment[]

  // Relación con los menús donde aparece este plato
  mondayMenus     Menu[]    @relation("monday", fields: [], references: [])
  tuesdayMenus    Menu[]    @relation("tuesday", fields: [], references: [])
  wednesdayMenus  Menu[]    @relation("wednesday", fields: [], references: [])
  thursdayMenus   Menu[]    @relation("thursday", fields: [], references: [])
  fridayMenus     Menu[]    @relation("friday", fields: [], references: [])

  // Relación con las estadísticas (por cada plato)
  attendances Attendance[]
  // Relación con las puntuaciones de los platos
  dishRatings     DishRating[]

  Stats Stats[]
}
model Menu {
  id        Int      @id @default(autoincrement())
  weekStart DateTime // Fecha de inicio de la semana
  weekEnd   DateTime // Fecha de finalización de la semana
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Platos para cada día de la semana
  monday    Dish  @relation("monday", fields: [mondayId], references: [id])
  mondayId  Int

  tuesday   Dish  @relation("tuesday", fields: [tuesdayId], references: [id])
  tuesdayId Int

  wednesday Dish  @relation("wednesday", fields: [wednesdayId], references: [id])
  wednesdayId Int

  thursday  Dish  @relation("thursday", fields: [thursdayId], references: [id])
  thursdayId Int

  friday    Dish  @relation("friday", fields: [fridayId], references: [id])
  fridayId  Int

  attendances Attendance[]
}

model Attendance {
  id          Int       @id @default(autoincrement())
  userId      Int
  menuId      Int
  dishId Int  // Nuevo campo para saber qué plato comió el usuario
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  menu        Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  dish        Dish      @relation(fields: [dishId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@unique([userId, menuId, dishId]) // Un usuario solo puede registrar asistencia una vez por menú y plato
}


model Comment {
  id          Int       @id @default(autoincrement())
  text        String
  userId      Int
  dishId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dish        Dish      @relation(fields: [dishId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model DishRating {
  id         Int     @id @default(autoincrement())
  userId     Int     // ID del usuario que calificó el plato
  dishId     Int     // ID del plato calificado
  statsId    Int     // ID de las estadísticas del día
  rating     Float   // Puntuación del plato, un valor entre 1 y 5
  createdAt  DateTime @default(now()) // Fecha en que se realizó la puntuación

  // Relaciones
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dish       Dish    @relation(fields: [dishId], references: [id], onDelete: Cascade)
  stats      Stats  @relation(fields: [statsId], references: [id], onDelete: Cascade)
  @@unique([userId, dishId, statsId]) // Un usuario solo puede calificar un plato una vez
}


model Stats {
  id              Int       @id @default(autoincrement())
  date            DateTime  @unique // Fecha de las estadísticas
  dayOfWeek       String  // 'Monday', 'Tuesday', etc.
  totalDish Int
  dishId Int
  totalAttendance Int       // Total de asistencias
  budgetUsed      Float     // Presupuesto utilizado
  wastagePercent  Float?    // Porcentaje de desperdicio
  avgDishRating   Float?    // Puntuación promedio de los platos
  createdAt       DateTime  @default(now())

  // Relación con Dish (Platos)
  dish       Dish    @relation(fields: [dishId], references: [id], onDelete: Cascade)
  
  // Relación con DishRating
  dishRatings     DishRating[]
}

// Notificaciones para usuarios
model Notification {
  id          Int       @id @default(autoincrement())
  title       String
  message     String
  type        String    // Tipo de notificación (sistema, menú, encuesta)
  createdAt   DateTime  @default(now())
  isActive    Boolean   @default(true)
}