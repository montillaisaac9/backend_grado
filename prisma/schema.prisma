
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Career {
  id          Int      @id @default(autoincrement()) // Unique identifier for the career
  name        String   @unique                      // Career name, unique
  description String?  // Optional description of the career
  createdAt   DateTime @default(now())               // Creation date, defaults to the current date
  isActive    Boolean  @default(true)                 // Indicates whether the career is active (true) or not (false)

  // Many-to-many relationships
  students       StudentCareer[]
  adminEmployees AdminEmployeeCareer[]
}

model Student {
  id             Int    @id @default(autoincrement())
  email          String @unique
  identification String @unique
  name           String
  password       String
  photo          String?
  securityWord   String @db.VarChar(100)
  attendances    Attendance[]
  comments       Comment[]
  careers        StudentCareer[]
}

model AdminEmployee {
  id             Int    @id @default(autoincrement())
  email          String @unique
  name           String
  position       String
  securityWord   String @db.VarChar(100)
  identification String @unique
  password       String
  careers        AdminEmployeeCareer[]
}

// Intermediate table for Student-Career relationship (Many-to-Many)
model StudentCareer {
  studentId  Int
  careerId   Int
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  career     Career  @relation(fields: [careerId], references: [id], onDelete: Cascade)

  @@id([studentId, careerId]) // Composite primary key
}

// Intermediate table for AdminEmployee-Career relationship (Many-to-Many)
model AdminEmployeeCareer {
  adminEmployeeId Int
  careerId        Int
  adminEmployee   AdminEmployee @relation(fields: [adminEmployeeId], references: [id], onDelete: Cascade)
  career          Career        @relation(fields: [careerId], references: [id], onDelete: Cascade)

  @@id([adminEmployeeId, careerId]) // Composite primary key
}

model Dish {
  id                  Int     @id @default(autoincrement())
  title               String
  description         String
  ratingPercentage    Float?
  votesCount          Int     @default(0)
  photo               String?
  cost                Float   // Costo del platillo
  calories            Int     // Calorías en kcal
  proteins            Float   // Proteínas en gramos
  fats                Float   // Grasas en gramos
  carbohydrates       Float   // Carbohidratos en gramos
  menus               Menu[]
  comments            Comment[]
}


model Menu {
  id          Int        @id @default(autoincrement())
  date        DateTime
  dayOfWeek   String
  time        DateTime
  dish        Dish       @relation(fields: [dishId], references: [id])
  dishId      Int
  attendances Attendance[]
}

model Attendance {
  id          Int       @id @default(autoincrement())
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   Int
  menu        Menu      @relation(fields: [menuId], references: [id])
  menuId      Int
  date        DateTime
  time        DateTime
}

model Comment {
  id          Int       @id @default(autoincrement())
  text        String
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   Int
  dish        Dish      @relation(fields: [dishId], references: [id])
  dishId      Int
  createdAt   DateTime  @default(now())
}
